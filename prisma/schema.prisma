generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "linux-musl"]
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.NVarChar(Max)
  access_token      String? @db.NVarChar(Max)
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.NVarChar(Max)
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model chat_messages {
  id            String        @id
  sessionId     String
  role          String
  content       String        @db.NVarChar(Max)
  timestamp     DateTime      @default(now())
  imageBase64   String?       @db.NVarChar(Max)
  imagePreview  String?       @db.NVarChar(Max)
  chat_sessions chat_sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model chat_sessions {
  id            String          @id
  title         String
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  chat_messages chat_messages[]
  users         users           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ARCHIVED: メール認証機能は現在使用していないためコメントアウト
// model email_verification_tokens {
//   id        String   @id
//   email     String
//   token     String   @unique
//   name      String?
//   expires   DateTime
//   createdAt DateTime @default(now())
//   used      Boolean  @default(false)
//   userId    String?
//   users     users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                          String                        @id
  email                       String?                       @unique
  name                        String?
  image                       String?
  isGuest                     Boolean                       @default(false)
  guestToken                  String?                       @unique
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  emailVerified               DateTime?
  password                    String?
  accounts                    accounts[]
  chat_sessions               chat_sessions[]
  sessions                    sessions[]
  // email_verification_tokens   email_verification_tokens[] // ARCHIVED
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
