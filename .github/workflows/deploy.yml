# Docker + Azure App Service for Containers Deployment
name: Docker Deploy to Azure App Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App for Containers
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Set Azure App Service configuration
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          app-settings-json: |
            [
              {
                "name": "WEBSITES_PORT",
                "value": "8080"
              },
              {
                "name": "NODE_ENV",
                "value": "production"
              },
              {
                "name": "PORT",
                "value": "8080"
              }
            ]

      - name: Restart Azure App Service
        run: |
          az webapp restart --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group $(az webapp show --name ${{ secrets.AZURE_WEBAPP_NAME }} --query resourceGroup --output tsv)

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for deployment to complete
        run: sleep 60

      - name: Health check
        run: |
          APP_URL="https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Checking health of: $APP_URL"

          # Retry mechanism for health check
          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f -s -o /dev/null -w "%{http_code}" "$APP_URL" | grep -q "200"; then
              echo "‚úÖ Health check passed! App is running."
              curl -I "$APP_URL"
              exit 0
            else
              echo "‚ùå Attempt $attempt failed. Retrying in 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done

          echo "‚ùå Health check failed after $max_attempts attempts"
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üöÄ Deployment successful!"
            echo "App URL: https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          else
            echo "‚ùå Deployment failed!"
          fi